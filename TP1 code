from cmu_graphics import *
import random
import string
import time

# reads words from a wordlist
def getWordList(filename='sowpods.txt'):
    with open(filename, 'r') as file:
        return set(word.strip().upper() for word in file if word.strip())

# creates and manages gameboard
class GameBoard:
    def __init__(self, size, wordList, difficulty):
        self.size = size
        self.difficulty = difficulty
        self.wordList = self.filterWordsByDifficulty(wordList)
        self.board = self.createBoard()
        self.allPossibleWords = self.findAllWords()

# groups by difficulty level -- difficulty is determined by word length
    def filterWordsByDifficulty(self, wordList):
        if self.difficulty == 'easy':
            return set(word for word in wordList if len(word) == 3)
        elif self.difficulty == 'medium':
            return set(word for word in wordList if 3 <= len(word) <= 5)
        else:  # hard
            return set(word for word in wordList if len(word) >= 5)

# creates game board
    def createBoard(self):
        board = [['' for _ in range(self.size)] for _ in range(self.size)]
        words = random.sample(list(self.wordList), min(3, len(self.wordList)))
        for word in words:
            self.placeWord(board, word)
        for i in range(self.size):
            for j in range(self.size):
                if board[i][j] == '':
                    board[i][j] = random.choice(string.ascii_uppercase)
        return board

# adds predetermied words to the board
    def placeWord(self, board, word):
        directions = [(0,1), (1,0), (1,1), (-1,1)]
        while True:
            direction = random.choice(directions)
            startX, startY = random.randint(0, self.size-1), random.randint(0, self.size-1)
            endX, endY = startX + direction[0]*(len(word)-1), startY + direction[1]*(len(word)-1)
            if 0 <= endX < self.size and 0 <= endY < self.size:
                if self.canPlaceWord(board, word, startX, startY, direction):
                    self.putWordOnBoard(board, word, startX, startY, direction)
                    return

# checks if word can be placed in specific location of the board
    def canPlaceWord(self, board, word, startX, startY, direction):
        for i in range(len(word)):
            x, y = startX + direction[0]*i, startY + direction[1]*i
            if board[x][y] != '' and board[x][y] != word[i]:
                return False
        return True
    
# adds the word the to board
    def putWordOnBoard(self, board, word, startX, startY, direction):
        for i in range(len(word)):
            x, y = startX + direction[0]*i, startY + direction[1]*i
            board[x][y] = word[i]

# finds all words in the list that are on the board -- included non predetermined words
    def findAllWords(self):
        words = set()
        for i in range(self.size):
            for j in range(self.size):
                self.dfs(i, j, '', set(), words)
        return words

# also finds words on the board -- more in depth
    def dfs(self, i, j, currentWord, visited, words):
        if len(currentWord) > 8:
            return
        if currentWord in self.wordList:
            words.add(currentWord)
        for di, dj in [(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)]:
            ni, nj = i + di, j + dj
            if 0 <= ni < self.size and 0 <= nj < self.size and (ni, nj) not in visited:
                visited.add((ni, nj))
                self.dfs(ni, nj, currentWord + self.board[ni][nj], visited, words)
                visited.remove((ni, nj))

# class to manage the game logic
class WordHuntPlus:
    def __init__(self, app, difficulty, boardSize):
        self.app = app
        self.board = GameBoard(boardSize, getWordList(), difficulty)
        self.score = 0
        self.currentWord = ''
        self.selectedCells = []
        self.foundWords = set()
        self.gameOver = False
        self.totalTime = 60
        self.startTime = time.time()
        self.powerups = {'freeze': 2, 'hint': 3, 'shuffle': 1}
        self.hintWord = None

    def onMousePress(self, mouseX, mouseY):
        if self.gameOver:
            return
        cellX = int((mouseX - self.app.startX) // self.app.gameBoardSize)
        cellY = int((mouseY - self.app.startY) // self.app.gameBoardSize)
        if 0 <= cellX < self.board.size and 0 <= cellY < self.board.size:
            self.currentWord = self.board.board[cellY][cellX]
            self.selectedCells = [(cellX, cellY)]
        self.hintWord = None

    def onMouseDrag(self, mouseX, mouseY):
        if self.gameOver:
            return
        cellX = int((mouseX - self.app.startX) // self.app.gameBoardSize)
        cellY = int((mouseY - self.app.startY) // self.app.gameBoardSize)
        if (0 <= cellX < self.board.size and 0 <= cellY < self.board.size and 
            (cellX, cellY) not in self.selectedCells):
            self.currentWord += self.board.board[cellY][cellX]
            self.selectedCells.append((cellX, cellY))

    def onMouseRelease(self):
        if self.gameOver:
            return
        if self.currentWord in self.board.wordList and self.currentWord not in self.foundWords:
            self.score += self.calculatePoints(self.currentWord)
            self.foundWords.add(self.currentWord)
        self.currentWord = ''
        self.selectedCells = []
        self.hintWord = None

# calculates points + handles updates to points
    def calculatePoints(self, word):
        if len(word) == 3:
            return 10
        elif len(word) == 4:
            return 20
        elif len(word) == 5:
            return 30
        else:
            return 50

    def updateTime(self):
        timeLeft = self.totalTime - (time.time() - self.startTime)
        if timeLeft <= 0:
            self.gameOver = True
        return max(timeLeft, 0)

    def usePowerup(self, powerup):
        if self.powerups[powerup] > 0:
            self.powerups[powerup] -= 1
            if powerup == 'freeze':
                self.totalTime += 10
            elif powerup == 'hint':
                self.showHint()
            elif powerup == 'shuffle':
                self.shuffleBoard()

    def showHint(self):
        unFoundWords = self.board.allPossibleWords - self.foundWords
        if unFoundWords:
            self.hintWord = random.choice(list(unFoundWords))
            self.selectedCells = self.findWordOnBoard(self.hintWord)

#finds the word on the board
    def findWordOnBoard(self, word):
        for i in range(self.board.size):
            for j in range(self.board.size):
                if self.board.board[i][j] == word[0]:
                    result = self.searchWord(word, i, j, set())
                    if result:
                        return result
        return []
    
#search if word is on the baord
    def searchWord(self, word, i, j, visited):
        if len(word) == 0:
            return list(visited)
        if i < 0 or i >= self.board.size or j < 0 or j >= self.board.size or (i, j) in visited or self.board.board[i][j] != word[0]:
            return None
        visited.add((j, i))
        for di, dj in [(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)]:
            result = self.searchWord(word[1:], i + di, j + dj, visited.copy())
            if result:
                return result
        return None

# powerup -- shuffles the board when the user clicks the button
    def shuffleBoard(self):
        flatBoard = [item for sublist in self.board.board for item in sublist]
        random.shuffle(flatBoard)
        self.board.board = [flatBoard[i:i+self.board.size] for i in range(0, len(flatBoard), self.board.size)]
        self.board.allPossibleWords = self.board.findAllWords()

# draws screen
def drawStartScreen(app):
    drawRect(0, 0, 600, 600, fill='lightBlue')
    drawLabel('WordHunt+', 300, 100, size=40, bold=True)
    drawRect(250, 200, 100, 40, fill='lightGreen')
    drawLabel('Start', 300, 220, size=20)
    
    # board size selector
    drawRect(150, 280, 150, 40, fill='white', border='black')
    drawLabel(f'Board: {app.boardSize}x{app.boardSize}', 225, 300, size=16)
    drawPolygon(280, 290, 290, 310, 300, 290, fill='black')
    
    # difficulty selector
    drawRect(320, 280, 150, 40, fill='white', border='black')
    drawLabel(f'Difficulty: {app.difficulty}', 395, 300, size=16)
    drawPolygon(450, 290, 460, 310, 470, 290, fill='black')
    
    drawRect(250, 350, 100, 40, fill='lightGreen')
    drawLabel('Instructions', 300, 370, size=16)

def handleBoardSizeSelection(app, mouseX, mouseY):
    if 150 <= mouseX <= 300 and 280 <= mouseY <= 320:
        app.showBoardDropdown = not app.showBoardDropdown
        app.showDifficultyDropdown = False
        return True
    
    if app.showBoardDropdown:
        for i in range(3):
            if 150 <= mouseX <= 300 and 320 + i*40 <= mouseY <= 360 + i*40:
                app.boardSize = i + 3
                app.showBoardDropdown = False
                updateBoardDimensions(app)
                return True
    return False

def handleDifficultySelection(app, mouseX, mouseY):
    if 320 <= mouseX <= 470 and 280 <= mouseY <= 320:
        app.showDifficultyDropdown = not app.showDifficultyDropdown
        app.showBoardDropdown = False
        return True
    
    if app.showDifficultyDropdown:
        difficulties = ['easy', 'medium', 'hard']
        for i in range(3):
            if 320 <= mouseX <= 470 and 320 + i*40 <= mouseY <= 360 + i*40:
                app.difficulty = difficulties[i]
                app.showDifficultyDropdown = False
                return True
    return False

# dropdown menu selection for difficulty levels and board size
def drawDropdowns(app):
    if app.showBoardDropdown:
        for i in range(3):
            drawRect(150, 320 + i*40, 150, 40, fill='white', border='black')
            drawLabel(f'{i+3}x{i+3}', 225, 340 + i*40, size=16)
    
    if app.showDifficultyDropdown:
        difficulties = ['easy', 'medium', 'hard']
        for i in range(3):
            drawRect(320, 320 + i*40, 150, 40, fill='white', border='black')
            drawLabel(difficulties[i], 395, 340 + i*40, size=16)

# writes out instructions on the start page
def drawInstructions(app):
    drawRect(0, 0, 600, 600, fill='lightBlue')
    drawLabel('Instructions', 300, 50, size=30, bold=True)
    instructions = [
        "Find words on the board",
        "Connect adjacent letters",
        "Words must be 3+ letters",
        "Points:",
        "3 letters: 10 points",
        "4 letters: 20 points",
        "5 letters: 30 points",
        "6+ letters: 50 points",
        "Powerups:",
        "Freeze: +10 seconds",
        "Hint: Highlights a word",
        "Shuffle: Rearranges board",
        "Difficulty Levels:",
        "Easy mode: only 3 letter words",
        "Medium mode: 3-5 letter words",
        "Hard mode: only 5+ letter words"
    ]
    for i in range(len(instructions)):
        drawLabel(instructions[i], 300, 90 + i * 28, size=16)
    drawRect(250, 550, 100, 40, fill='lightGreen')
    drawLabel('Back', 300, 570, size=20)

def drawGame(app):
    drawLabel('WordHunt+', 300, 30, size=30, bold=True)
    for i in range(app.game.board.size):
        for j in range(app.game.board.size):
            x, y = app.boardLayout[i][j]
            isSelected = (j, i) in app.game.selectedCells
            isHinted = app.game.hintWord and (j, i) in app.game.selectedCells
            fill = 'yellow' if isSelected else 'orange' if isHinted else 'lightGreen'
            drawRect(x, y, app.gameBoardSize-1, app.gameBoardSize-1, fill=fill, border='black')
            drawLabel(app.game.board.board[i][j], x + app.gameBoardSize//2, y + app.gameBoardSize//2, 
                      size=min(24, app.gameBoardSize-10), fill='darkGreen', bold=True)
    drawLabel(f'Score: {app.game.score}', 300, 550, size=24)
    drawLabel(f'Current Word: {app.game.currentWord}', 300, 520, size=20)
    timeLeft = app.game.updateTime()
    drawRect(100, 70, 400, 20, fill='lightGray')
    drawRect(100, 70, (timeLeft / app.game.totalTime) * 400, 20, fill='green')
    drawPowerups(app)

def drawPowerups(app):
    powerups = [('Freeze', 'blue'), ('Hint', 'yellow'), ('Shuffle', 'green')]
    for i in range(len(powerups)):
        x = 100 + i * 150
        y = app.powerupStartY
        drawRect(x, y, 100, 40, fill=powerups[i][1])
        drawLabel(f"{powerups[i][0]}: {app.game.powerups[powerups[i][0].lower()]}", x + 50, y + 20, size=16)

# handles display when the game ends 
def drawGameOver(app):
    drawRect(0, 0, 600, 600, fill='white')
    drawLabel('Game Over!', 300, 50, size=36, bold=True)
    drawLabel(f'Final Score: {app.game.score}', 300, 100, size=24)
    drawLabel('Words You Found:', 100, 150, size=20, align='left')
    foundWords = list(app.game.foundWords)
    for i in range(min(20, len(foundWords))):
        drawLabel(foundWords[i], 150, 180 + i * 20, size=16, align='left')
    if len(foundWords) > 20:
        drawLabel(f"...and {len(foundWords) - 20} more", 150, 180 + 20 * 20, size=16, align='left')
    
    drawLabel('All Possible Words:', 300, 150, size=20, align='left')
    allWords = list(app.game.board.allPossibleWords)
    for i in range(min(20, len(allWords))):
        drawLabel(allWords[i], 350, 180 + i * 20, size=16, align='left')
    if len(allWords) > 20:
        drawLabel(f"...and {len(allWords) - 20} more", 350, 180 + 20 * 20, size=16, align='left')

def redrawAll(app):
    if app.gameState == 'start':
        drawStartScreen(app)
        drawDropdowns(app)
    elif app.gameState == 'instructions':
        drawInstructions(app)
    elif app.gameState == 'playing':
        if not app.game.gameOver:
            drawGame(app)
        else:
            drawGameOver(app)

def onMousePress(app, mouseX, mouseY):
    if app.gameState == 'start':
        if 250 <= mouseX <= 350 and 200 <= mouseY <= 240:
            app.gameState = 'playing'
            app.game = WordHuntPlus(app, 'medium', app.boardSize)
        elif 200 <= mouseX <= 400 and 280 <= mouseY <= 320:
            handleBoardSizeSelection(app, mouseX, mouseY)
        elif 250 <= mouseX <= 350 and 350 <= mouseY <= 390:
            app.gameState = 'instructions'
    elif app.gameState == 'instructions':
        if 250 <= mouseX <= 350 and 550 <= mouseY <= 590:
            app.gameState = 'start'
    elif app.gameState == 'playing':
        if app.powerupStartY <= mouseY <= app.powerupStartY + 40:
            if 150 <= mouseX <= 250:
                app.game.usePowerup('freeze')
            elif 300 <= mouseX <= 400:
                app.game.usePowerup('hint')
            elif 450 <= mouseX <= 550:
                app.game.usePowerup('shuffle')
        else:
            app.game.onMousePress(mouseX, mouseY)

def onMouseDrag(app, mouseX, mouseY):
    if app.gameState == 'playing':
        app.game.onMouseDrag(mouseX, mouseY)

def onMouseRelease(app, mouseX, mouseY):
    if app.gameState == 'playing':
        app.game.onMouseRelease()

def onStep(app):
    if app.gameState == 'playing' and not app.game.gameOver:
        app.game.updateTime()

def updateBoardDimensions(app):
    app.gameBoardSize = min(60, 480 // app.boardSize)
    app.gameBoardWidth = app.gameBoardSize * app.boardSize
    app.gameBoardHeight = app.gameBoardSize * app.boardSize
    app.startX = (600 - app.gameBoardWidth) // 2
    app.startY = (600 - app.gameBoardHeight) // 2
    app.powerupStartY = app.startY + app.gameBoardHeight + 20
    
    # pre-generate board layout
    app.boardLayout = [
        [(app.startX + j * app.gameBoardSize, app.startY + i * app.gameBoardSize) 
         for j in range(app.boardSize)] 
        for i in range(app.boardSize)
    ]

def onAppStart(app):
    app.gameState = 'start'
    app.boardSize = 5  # default to 5x5
    app.difficulty = 'medium'
    app.showBoardDropdown = False
    app.showDifficultyDropdown = False
    app.game = None
    updateBoardDimensions(app)

def main():
    runApp(width=600, height=600)

if __name__ == "__main__":
    main()
